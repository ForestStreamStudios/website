import './App.css.proxy.js';
/* src\App.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { onMount } from "../web_modules/svelte.js";
import dayjs from "../web_modules/dayjs.js";
import mix from "../web_modules/mix-color.js";
import SocialLinks from "./SocialLinks.js";
import IntroText from "./IntroText.js";
import ForestStreamLogo from "./ForestStreamLogo.js";

function create_fragment(ctx) {
	let div;
	let header;
	let foreststreamlogo;
	let t0;
	let introtext;
	let t1;
	let sociallinks;
	let t2;
	let img;
	let img_src_value;
	let current;

	foreststreamlogo = new ForestStreamLogo({
			props: { fillColor: /*fillColor*/ ctx[1] }
		});

	introtext = new IntroText({
			props: { textColor: /*textColor*/ ctx[2] }
		});

	sociallinks = new SocialLinks({});

	return {
		c() {
			div = element("div");
			header = element("header");
			create_component(foreststreamlogo.$$.fragment);
			t0 = space();
			create_component(introtext.$$.fragment);
			t1 = space();
			create_component(sociallinks.$$.fragment);
			t2 = space();
			img = element("img");
			attr(img, "id", "background-image");
			if (img.src !== (img_src_value = "/forest.webp")) attr(img, "src", img_src_value);
			attr(img, "alt", "forest");
			attr(img, "class", "svelte-bqhbbu");
			set_style(header, "background-color", /*backgroundColor*/ ctx[0]);
			attr(header, "class", "App-header svelte-bqhbbu");
			attr(div, "class", "App");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, header);
			mount_component(foreststreamlogo, header, null);
			append(header, t0);
			mount_component(introtext, header, null);
			append(header, t1);
			mount_component(sociallinks, header, null);
			append(header, t2);
			append(header, img);
			current = true;
		},
		p(ctx, [dirty]) {
			const foreststreamlogo_changes = {};
			if (dirty & /*fillColor*/ 2) foreststreamlogo_changes.fillColor = /*fillColor*/ ctx[1];
			foreststreamlogo.$set(foreststreamlogo_changes);
			const introtext_changes = {};
			if (dirty & /*textColor*/ 4) introtext_changes.textColor = /*textColor*/ ctx[2];
			introtext.$set(introtext_changes);

			if (!current || dirty & /*backgroundColor*/ 1) {
				set_style(header, "background-color", /*backgroundColor*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(foreststreamlogo.$$.fragment, local);
			transition_in(introtext.$$.fragment, local);
			transition_in(sociallinks.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(foreststreamlogo.$$.fragment, local);
			transition_out(introtext.$$.fragment, local);
			transition_out(sociallinks.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(foreststreamlogo);
			destroy_component(introtext);
			destroy_component(sociallinks);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let now = dayjs();
	let hour = now["$H"];
	let minute = now["$m"];
	let dayProgress = ((hour + minute / 60) / 24 * 100).toFixed(0);
	console.log(dayProgress);
	let hourProgress = (minute / 60).toFixed(2);

	const colorAnchors = [
		"41,40,61",
		"42,40,60",
		"50,43,61",
		"65,47,63",
		"90,53,67",
		"131,62,75",
		"189,77,85",
		"206,119,99",
		"223,193,126",
		"242,220,137",
		"250,238,142",
		"252,248,146",
		// pass noon
		"252,248,146",
		"250,238,142",
		"242,220,137",
		"223,193,126",
		"206,119,99",
		"189,77,85",
		"131,62,75",
		"90,53,67",
		"65,47,63",
		"50,43,61",
		"42,40,60",
		"41,40,61"
	];

	let backgroundColor;

	const calcBgColor = () => {
		if (hour < 24) {
			$$invalidate(0, backgroundColor = mix(`rgb(${colorAnchors[hour]})`, `rgb(${colorAnchors[hour + 1]})`, `${hourProgress}`));
		} else {
			$$invalidate(0, backgroundColor = `rgb(${colorAnchors[hour]})`);
		}
	};

	calcBgColor();
	let fillColor = hour < 9 | hour > 14 ? "white" : "black";
	let textColor = hour < 9 | hour > 14 ? "white" : "black";

	onMount(() => {
		const interval = setInterval(
			() => {
				now = dayjs(); //console.log(`The time is ${hour}:${minute} and the day is ${dayProgress}% complete`);
				hour = now["$H"];
				minute = now["$m"];
				hourProgress = (minute / 60).toFixed(2);
				calcBgColor();
				$$invalidate(1, fillColor = hour < 9 | hour > 14 ? "white" : "black");
				$$invalidate(2, textColor = hour < 9 | hour > 14 ? "white" : "black");
			},
			10000
		); //console.log(`The time is ${hour}:${minute} and the day is ${dayProgress}% complete`);

		return () => {
			clearInterval(interval);
		};
	});

	return [backgroundColor, fillColor, textColor];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;