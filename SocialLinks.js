import './SocialLinks.css.proxy.js';
/* src\SocialLinks.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	action_destroyer,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_bidirectional_transition,
	detach,
	element,
	group_outros,
	init,
	insert,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { onMount } from "../web_modules/svelte.js";
import { fade } from "../web_modules/svelte/transition.js";
import tilt from "./tilt.js";

function create_if_block(ctx) {
	let a0;
	let img0;
	let img0_src_value;
	let img0_transition;
	let t0;
	let a1;
	let img1;
	let img1_src_value;
	let img1_transition;
	let t1;
	let a2;
	let img2;
	let img2_src_value;
	let img2_transition;
	let t2;
	let a3;
	let img3;
	let img3_src_value;
	let img3_transition;
	let current;

	return {
		c() {
			a0 = element("a");
			img0 = element("img");
			t0 = space();
			a1 = element("a");
			img1 = element("img");
			t1 = space();
			a2 = element("a");
			img2 = element("img");
			t2 = space();
			a3 = element("a");
			img3 = element("img");
			attr(img0, "class", "icon svelte-10pe7hg");
			attr(img0, "alt", "Discord Logo");
			if (img0.src !== (img0_src_value = "/discord_icon.svg")) attr(img0, "src", img0_src_value);
			attr(a0, "href", "https://discord.gg/cB777Db");
			attr(a0, "target", "_blank");
			attr(img1, "class", "icon svelte-10pe7hg");
			attr(img1, "alt", "Instagram Logo");
			if (img1.src !== (img1_src_value = "/instagram_icon.svg")) attr(img1, "src", img1_src_value);
			attr(a1, "href", "https://www.instagram.com/foreststreamstudios/");
			attr(a1, "target", "_blank");
			attr(img2, "class", "icon svelte-10pe7hg");
			attr(img2, "alt", "Facebook Logo");
			if (img2.src !== (img2_src_value = "/facebook_icon.svg")) attr(img2, "src", img2_src_value);
			attr(a2, "href", "https://www.facebook.com/pg/foreststreamstudios/about/");
			attr(a2, "target", "_blank");
			attr(img3, "class", "icon svelte-10pe7hg");
			attr(img3, "alt", "Twitter Logo");
			if (img3.src !== (img3_src_value = "/twitter_icon.svg")) attr(img3, "src", img3_src_value);
			attr(a3, "href", "https://twitter.com/FStreamStudios");
			attr(a3, "target", "_blank");
		},
		m(target, anchor) {
			insert(target, a0, anchor);
			append(a0, img0);
			insert(target, t0, anchor);
			insert(target, a1, anchor);
			append(a1, img1);
			insert(target, t1, anchor);
			insert(target, a2, anchor);
			append(a2, img2);
			insert(target, t2, anchor);
			insert(target, a3, anchor);
			append(a3, img3);
			current = true;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img0_transition) img0_transition = create_bidirectional_transition(img0, fade, { duration: 2000 }, true);
				img0_transition.run(1);
			});

			add_render_callback(() => {
				if (!img1_transition) img1_transition = create_bidirectional_transition(img1, fade, { duration: 2000 }, true);
				img1_transition.run(1);
			});

			add_render_callback(() => {
				if (!img2_transition) img2_transition = create_bidirectional_transition(img2, fade, { duration: 2000 }, true);
				img2_transition.run(1);
			});

			add_render_callback(() => {
				if (!img3_transition) img3_transition = create_bidirectional_transition(img3, fade, { duration: 2000 }, true);
				img3_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!img0_transition) img0_transition = create_bidirectional_transition(img0, fade, { duration: 2000 }, false);
			img0_transition.run(0);
			if (!img1_transition) img1_transition = create_bidirectional_transition(img1, fade, { duration: 2000 }, false);
			img1_transition.run(0);
			if (!img2_transition) img2_transition = create_bidirectional_transition(img2, fade, { duration: 2000 }, false);
			img2_transition.run(0);
			if (!img3_transition) img3_transition = create_bidirectional_transition(img3, fade, { duration: 2000 }, false);
			img3_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a0);
			if (detaching && img0_transition) img0_transition.end();
			if (detaching) detach(t0);
			if (detaching) detach(a1);
			if (detaching && img1_transition) img1_transition.end();
			if (detaching) detach(t1);
			if (detaching) detach(a2);
			if (detaching && img2_transition) img2_transition.end();
			if (detaching) detach(t2);
			if (detaching) detach(a3);
			if (detaching && img3_transition) img3_transition.end();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let tilt_action;
	let current;
	let mounted;
	let dispose;
	let if_block = /*loaded*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "id", "social-links");
			attr(div, "class", "svelte-10pe7hg");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(tilt_action = tilt.call(null, div, { scale: 1.1, reverse }));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*loaded*/ ctx[0]) {
				if (if_block) {
					if (dirty & /*loaded*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

let reverse = false;

function instance($$self, $$props, $$invalidate) {
	let loaded = false;

	onMount(() => {
		setTimeout(
			() => {
				$$invalidate(0, loaded = true);
			},
			1500
		);
	});

	return [loaded];
}

class SocialLinks extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default SocialLinks;